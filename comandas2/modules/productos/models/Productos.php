<?php

namespace app\modules\productos\models;

use himiklab\thumbnail\EasyThumbnailImage;
use Symfony\Component\CssSelector\Exception\InternalErrorException;
use Symfony\Component\Finder\Exception\AccessDeniedException;
use Yii;
use app\modules\aplicacion\models\Aplicacion;
use yii\data\ActiveDataProvider;
use yii\data\Sort;
use yii\helpers\Url;
use yii\web\BadRequestHttpException;

/**
 * This is the model class for table "productos".
 *
 * @property integer $id
 * @property string $nombre
 * @property string $descripcion
 * @property double $precio
 * @property integer $aplicacion_id
 * @property bool $mostrable
 * @property bool $es_opcion
 * @property bool $preparacion_cocina
 * @property string $thumbUrl
 *
 * @property PedidosHasProductos[] $pedidosHasProductos
 * @property Aplicacion $aplicacion
 * @property ProductosHasCategorias[] $productosHasCategorias
 * @property Categorias[] $categorias
 * @property ProductosHasProductosOpciones[] $productosHasProductosOpciones
 * @property ProductosOpciones[] $productosOpciones
 * @property ProductosImagenes[] $productosImagenes
 * @property ProductosOpcionesHasProductos[] $productosOpcionesHasProductos
 * @property ProductosOpciones[] $productosOpciones0
 */
class Productos extends \yii\db\ActiveRecord
{
    public $productos_opciones;
    public $categorias_id;
    public $images;
    public $image_url;
    public $images_url=[];

    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return 'productos';
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['nombre', 'aplicacion_id'], 'required'],
            [['descripcion'], 'string'],
            [['precio'], 'number'],
            [['aplicacion_id'], 'integer'],
            [['es_opcion', 'mostrable', 'preparacion_cocina'], 'boolean'],
            [['nombre'], 'string', 'max' => 45],
            [['aplicacion_id'], 'exist', 'skipOnError' => true, 'targetClass' => Aplicacion::className(), 'targetAttribute' => ['aplicacion_id' => 'id']],
        ];
    }

    public function fields()
    {
        $fields =  parent::fields(); // TODO: Change the autogenerated stub
        $fields[] = 'thumbUrl';
        $fields[] = 'imageUrl';
        $fields[] = 'imagesUrl';
        return $fields;
    }

    public function behaviors()
    {
        $behaviors = parent::behaviors(); // TODO: Change the autogenerated stub
        $behaviors['image'] = [
            'class' => 'app\behaviors\ImageBehave',
        ];
        return $behaviors;
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => Yii::t('app', 'ID'),
            'nombre' => Yii::t('app', 'Producto'),
            'descripcion' => Yii::t('app', 'Descripción'),
            'precio' => Yii::t('app', 'Precio'),
            'aplicacion_id' => Yii::t('app', 'Aplicación'),
            'mostrable' => Yii::t('app', 'Mostrable'),
            'preparacion_cocina' => Yii::t('app', 'Preparacion en Cocina'),
            'categorias_id' => Yii::t('app','Categorías'),
            'images' => Yii::t('app','Imágenes'),
            'es_opcion' => Yii::t('app','Se utiliza como opción'),
        ];
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getPedidosHasProductos()
    {
        return $this->hasMany(PedidosHasProductos::className(), ['productos_id' => 'id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getAplicacion()
    {
        return $this->hasOne(Aplicacion::className(), ['id' => 'aplicacion_id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getProductosHasCategorias()
    {
        return $this->hasMany(ProductosHasCategorias::className(), ['productos_id' => 'id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getCategorias()
    {
        return $this->hasMany(Categorias::className(), ['id' => 'categorias_id'])->viaTable('productos_has_categorias', ['productos_id' => 'id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getProductosHasProductosOpciones()
    {
        return $this->hasMany(ProductosHasProductosOpciones::className(), ['productos_id' => 'id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getProductosOpciones()
    {
        return $this->hasMany(ProductosOpciones::className(), ['id' => 'productos_opciones_id'])->viaTable('productos_has_productos_opciones', ['productos_id' => 'id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getProductosImagenes()
    {
        return $this->hasMany(ProductosImagenes::className(), ['productos_id' => 'id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getProductosImagen()
    {
        return $this->hasOne(ProductosImagenes::className(), ['productos_id' => 'id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getProductosOpcionesHasProductos()
    {
        return $this->hasMany(ProductosOpcionesHasProductos::className(), ['productos_id' => 'id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getProductosOpciones0()
    {
        return $this->hasMany(ProductosOpciones::className(), ['id' => 'productos_opciones_id'])->viaTable('productos_opciones_has_productos', ['productos_id' => 'id']);
    }

    public function getThumbUrl()
    {
        $imagen = $this->getImage();
        /* @var $imagen \rico\yii2images\models\Image*/
        return Yii::$app->params['baseUrl'].$imagen->getUrl('300x');
    }

    public function getImageUrl()
    {
        $imagen = $this->getImage();
        /* @var $imagen \rico\yii2images\models\Image*/
        return $this->image_url = Yii::$app->params['baseUrl'].$imagen->getUrl();
    }

    public function getImagesUrl()
    {
        /* @var $imagen \rico\yii2images\models\Image*/
        foreach ($this->getImages() as $image)
            $this->images_url[] = Yii::$app->params['baseUrl'].$image->getUrl();
        return $this->images_url;
    }

    public function afterSave($insert, $changedAttributes)
    {
        if(!$insert) {
            ProductosHasCategorias::deleteAll(['productos_id'=>$this->id]);
            ProductosHasProductosOpciones::deleteAll(['productos_id'=>$this->id]);
        }
        if($this->categorias_id) {
            foreach ($this->categorias_id as $_cat_id) {
                $productosCategorias = new ProductosHasCategorias();
                $productosCategorias->categorias_id = $_cat_id;
                $productosCategorias->productos_id = $this->id;
                $productosCategorias->save();
            }
        }
        if($this->productos_opciones) {
            foreach ($this->productos_opciones as $_productos_opciones) {
                $ProductosOpcions = new ProductosOpciones();
                $ProductosOpcions->nombre = $_productos_opciones['nombre'];
                $ProductosOpcions->save();
                foreach ($_productos_opciones['productos_opciones_has_productos'] as $_productos_opciones_has_productos) {
                    $productosOpcionesHasProductos = new ProductosOpcionesHasProductos();
                    $productosOpcionesHasProductos->productos_opciones_id = $ProductosOpcions->id;
                    $productosOpcionesHasProductos->productos_id = $_productos_opciones_has_productos;
                    $productosOpcionesHasProductos->save();
                }
                $productosHasProductosOpcions = new ProductosHasProductosOpciones();
                $productosHasProductosOpcions->productos_id = $this->id;
                $productosHasProductosOpcions->productos_opciones_id = $ProductosOpcions->id;
                $productosHasProductosOpcions->save();
            }
        }
        parent::afterSave($insert, $changedAttributes); // TODO: Change the autogenerated stub
    }

    public function afterFind()
    {
        if(Yii::$app->session->isActive) {
            if($this->aplicacion_id && $this->aplicacion_id != Yii::$app->session->get('aplicacion_id'))
                throw new BadRequestHttpException();
        } else {
            if($this->aplicacion_id && $this->aplicacion_id != Yii::$app->params['aplicacion_id'])
                throw new BadRequestHttpException();
        }
        foreach ($this->productosHasCategorias as $_productosCategorias) {
            $this->categorias_id[] = $_productosCategorias->categorias_id;
        }
        parent::afterFind(); // TODO: Change the autogenerated stub
    }

    public function beforeDelete()
    {
        ProductosImagenes::deleteAll(['productos_id'=>$this->id]);
        ProductosHasCategorias::deleteAll(['productos_id'=>$this->id]);
        ProductosHasProductosOpciones::deleteAll(['productos_id'=>$this->id]);
        return parent::beforeDelete(); // TODO: Change the autogenerated stub
    }

    public function search($params) {
        $query = self::find()
            ->innerJoin('productos_has_categorias', 'productos_has_categorias.productos_id = productos.id');

        $sort = new Sort([
            'attributes' => array_merge(
                array_keys($this->getAttributes()),[]
            ),
        ]);

        $dataProvider = new ActiveDataProvider([
            'query' => $query,
            'sort' => $sort
        ]);

        if(!$this->load($params)) {
            return $dataProvider;
        }

        if(isset($params['Productos']['categoria_id']))
            $query->filterWhere(['productos_has_categorias.categorias_id'=>$params['Productos']['categoria_id']]);
        if($this->id)
            $query->andWhere(['id' => $this->id]);
        if($this->nombre)
            $query->andWhere(['nombre' => $this->nombre]);
        if($this->aplicacion_id)
            $query->andWhere(['aplicacion_id' => $this->aplicacion_id]);

        return $dataProvider;
    }
}
